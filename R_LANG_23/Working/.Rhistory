mr3
mr4
addr = apply(vm,1,sum)
addr
# 4. 열 단위 합계
addr = apply(vm,2,sum)
# 4. 열 단위 합계
addc = apply(vm,2,sum)
addc # 10 26 42 58
# 3. 행 단위 합계
addr = apply(vm,1,sum)
addr
# 5. 행 단위 평균
meanr = apply(vm,1, mean)
mear
# 5. 행 단위 평균
meanr = apply(vm,1, mean)
mear
meanr
# 6. 열 단위 평균
meanc = apply(vm, 2, mean)
meanc
vm = matrix(rep,nrow = 3)
vm
# [문제3] 1부터 12까지 12개 요소로 구성된 벡터를 생성하고 3행 * 2열 * 2면의
# array 만들고 아래의 계산
vr = rep(1,12 ,1)
vm = matrix(rep,nrow = 3)
vm
# [문제3] 1부터 12까지 12개 요소로 구성된 벡터를 생성하고 3행 * 2열 * 2면의
# array 만들고 아래의 계산
c12 <-  c(1:12)
ax <- array(c12, c(3,2,2))
ax
# 1. 각 면의 행의 합계
ax[,1,1]
# 2. 각 면의 열의 합계
ax[,1,1]
options(prompt = "R>")
# [문제3] 1부터 12까지 12개 요소로 구성된 벡터를 생성하고 3행 * 2열 * 2면의
# array 만들고 아래의 계산
c12 <-  c(1:12)
ax <- array(c12, c(3,2,2))
ax
#면참조
ax1[,,1]
ax2[,,2]
# [문제3] 1부터 12까지 12개 요소로 구성된 벡터를 생성하고 3행 * 2열 * 2면의
# array 만들고 아래의 계산
c12 <-  c(1:12)
ax <- array(c12, c(3,2,2))
ax
#면참조
ax1[,,1]
#면참조
ax[,,1]
ax[,,2]
library(stringr)
s1 <-  "abc1234ABCDEFG홍길동TEL010-11234-5678#end"
str_extact_all(s1, "[a-z]{3}")
library(stringr)
install.packages("stringr")
install.packages("stringr")
library(stringr)
s1 <-  "abc1234ABCDEFG홍길동TEL010-11234-5678#end"
str_extact_all(s1, "[a-z]{3}")
library(stringr)
s1 <-  "abc1234ABCDEFG홍길동TEL010-11234-5678#end"
s1
str_extact_all(s1, "[a-z]{3}")
str_extract_all(s1, "[a-z]{3}")
str_extract_all(s1, "[a-z]{3,}")
str_extract_all(s1, "[a-z]{3,}")
s1 <-  "abc1234ABCDEFG홍길동tel010-11234-5678#end"
str_extract_all(s1, "[a-z]{3}") #"abc" "end"
str_extract_all(s1, "[a-z]{3,}")
str_extract_all(s1, "[a-z]{3,}")
str_extract_all(s1, "[a-z]{1,3}")
s1 <-  "abcd1234ABCDEFG홍길동tel010-11234-5678#end"
s1
str_extract_all(s1, "[a-z]{3}") #"abc" "end"
str_extract_all(s1, "[a-z]{3,}")
str_extract_all(s1, "[a-z]{1,3}")
#extract_all, extract 의 차이점
str_extract(s1, "[a-z]{1,3}")
#특정값 호출
str_extract_all(s1, "tel")
str_extract_all(s1, "홍길동")
#모든 한글을 축출하라
str_extract_all(s1, "[가-힣]")
#모든 한글을 축출하라
str_extract_all(s1, "[가-힣]{3}")
#모든 한글을 축출하라
str_extract_all(s1, "[가-힣]")
str_extract_all(s1, "[가-힣]{3}")
#모든 한글을 축출하라
str_extract(s1, "[가-힣]")
# 특정 문자열을 제외 : ex) 한글제외
str_extract_all(s1, "[^가-힣]")
#지정된 길이의 단어를 추출
s1
str_extract_all(s1, "\\w{3}" )
#지정된 길이(예: 3자리) 의 단어를 추출
str_extract_all(s1, "\\w{3}" ) # "abc"    "d12"    "34A"    "BCD"    "EFG"    "홍길동" "tel"    "010"    "112"    "567"    "end"
#숫자 추출
str_extract_all(s1, "[0-9]")
#숫자 추출
str_extract_all(s1, "[0-9]-")
#숫자 추출
s1
str_extract_all(s1, "[0-9]-")
# 전화번호 추출
str_extract_all(s1, "[0-9]-{3}[0-9]-{4}")
# 전화번호 추출
str_extract_all(s1, "[0-9]-{3}{4}")
# 전화번호 추출
str_extract_all(s1, "[0-9]-{3,4}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{3,4}-")
s1
# 전화번호 추출
str_extract_all(s1, "-[0-9]{3,4}-")
# 전화번호 추출
str_extract_all(s1, "[-0-9]{3,4}-")
# 전화번호 추출
str_extract_all(s1, "[0-9]-{3,4}-")
# 전화번호 추출
str_extract_all(s1, "[0-9]{3,4}-")
# 전화번호 추출
str_extract_all(s1, "[d-]{3,4}")
# 전화번호 추출
str_extract_all(s1, "-{3,4}")
# 전화번호 추출
str_extract_all(s1, "{6,7}-")
# 전화번호 추출
str_extract_all(s1, "[0-9]{6,7}-")
# 전화번호 추출
str_extract_all(s1, "-[0-9]{6,7}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{6,7}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{6,7}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{5,6}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{5,7}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{5,7}")
# 전화번호 추출
str_extract_all(s1, "[0-9]-{5,7}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{5,7}-")
# 전화번호 추출
str_extract_all(s1, "[0-9]{5,7}-[0-9]{6,8")
# 전화번호 추출
str_extract_all(s1, "[0-9]{5,7}-//[0-9]{6,8")
# 전화번호 추출
str_extract_all(s1, "[0-9]")
# 전화번호 추출
str_extract_all(s1, "-[0-9]")
# 전화번호 추출
str_extract_all(s1, "-[0-9]-")
# 전화번호 추출
str_extract_all(s1, "d{3}-?d{3}-?{}4")
#숫자 추출
s1
s1 <-  "abcd1234ABCDEFG홍길동tel010-11234-5678#주민번호123456-1234567"
# 전화번호 추출
str_extract_all(s1, "d{3}-?d{3}-?{}4")
s1
# 전화번호 추출
str_extract_all(s1, "\d{3}-?d{3}-?{}4")
# 전화번호 추출
str_extract_all(s1, ".\d{3}-?d{3}-?{}4")
# 전화번호 추출
str_extract_all(s1, "(d{3}-?)d{3}-?{}4")
# 전화번호 추출
str_extract_all(s1, "(d{3}[.-]-?)d{3}-?{}4")
# 전화번호 추출
str_extract_all(s1, "[.-]{3,5}")
# 전화번호 추출
str_extract_all(s1, "\d{3,5}")
# 전화번호 추출
str_extract_all(s1, "-")
# 전화번호 추출
str_extract_all(s1, ".-")
# 전화번호 추출
str_extract_all(s1, "\d")
# 전화번호 추출
str_extract_all(s1, "d")
# 전화번호 추출
str_extract_all(s1, "/d")
# 전화번호 추출
str_extract_all(s1, "\d")
# 전화번호 추출
str_extract_all(s1, "\d\d\d")
# 전화번호 추출
str_extract_all(s1, ".")
# 전화번호 추출
str_extract_all(s1, "[0-9]{3}-[0-9]{4}-[0-9]{}4")
# 전화번호 추출
str_extract_all(s1, "[0-9]{3}-[0-9]{4}-[0-9]{4}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{3}-[0-9]{4}-?[0-9]{4}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{3}-?[0-9]{4}-?[0-9]{4}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{3}-")
# 전화번호 추출
str_extract_all(s1, "[0-9]{3,4}-")
s1
s1 <-  "abcd1234ABCDEFG홍길동tel010-1234-5678#주민번호123456-1234567"
# 전화번호 추출
str_extract_all(s1, "[0-9]{3,4}-")
# 전화번호 추출
str_extract_all(s1, "[0-9]{3,4}-[0-9]{3,4}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{3,4}--[0-9]{3,4}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{3,4}-[0-9]{3,4}")
# 전화번호 추출
str_extract_all(s1, "[0-9]{3,4}-[0-9]{3,4}-[0-9]{3,4}")
str_extract_all(s1, "[0-9]{6}-[0-9]{7}")
# 전화번호 추출
#지역번호 3자리, 국번: 4자리, 번호
str_extract_all(s1, "[0-9]{3}-[0-9]{3,4}-[0-9]{3,4}")
str_extract_all(s1, "[0-9]{2}-[0-9]{3,4}-[0-9]{3,4}")
str_extract_all(s1, "[0-9]{2,2}-[0-9]{3,4}-[0-9]{3,4}")
s1 <-  "abcd1234ABCDEFG홍길동tel010-1234-5678,031-1234-5678,010-123-5678,02-234-1234#주민번호123456-1234567"
str_extract_all(s1, "[0-9]{2}-[0-9]{3}-[0-9]{3,4}")
s1
str_extract_all(s1, "[0-9]{2,3}-[0-9]{3}-[0-9]{3,4}")
str_extract_all(s1, "[0-9]{-2}-[0-9]{3}-[0-9]{3,4}")
str_extract_all(s1, "[0-9]{2}-[0-9]{3}-[0-9]{3,4}")
str_extract_all(s1, "[0-9]{3}-[0-9]{3,4}-[0-9]{3,4}") #"010-1234-5678"
str_extract_all(s1, "[0-9]{2}-[0-9]{3}-[0-9]{3,4}")
str_extract_all(s1, "[0-9]{6}-[0-9]{7}")
str_extract_all(s1, "[0-9]{2}-[0-9]{3}-[0-9]{3,4}")
str_extract_all(s1, "[0-9]{3}-[0-9]{3}-[0-9]{3,4}")
# 전화번호 추출
#지역번호 3자리, 국번: 4자리, 번호
str_extract_all(s1, "[0-9]{2}-[0-9]{3,4}-[0-9]{3,4}") #"010-1234-5678"
str_extract_all(s1, "/\d/{3}-[0-9]")
str_extract_all(s1, "\d{3}-[0-9]")
str_extract_all(s1, "\d {3}-[0-9]")
str_extract_all(s1, "[0-9]{3}-[0-9]")
str_extract_all(s1, "[.0-9]{3}-[0-9]")
str_extract_all(s1, "[.0-9]{3}-[0-9]{3}-[0-9]{3,4}")
# 전화번호 추출
#지역번호 3자리, 국번: 4자리, 번호
str_extract_all(s1, "[0-9]{2}-[0-9]{3,4}-[0-9]{3,4}") #"010-1234-5678"
# 전화번호 추출
#지역번호 3자리, 국번: 4자리, 번호
str_extract_all(s1, "[0-9]{3}-[0-9]{3,4}-[0-9]{3,4}") #"010-1234-5678"
# 전화번호 추출
#지역번호 3자리, 국번: 4자리, 번호
str_extract_all(s1, "[0-9]{3}-[0-9]{3}-[0-9]{3,4}") #"010-1234-5678"
# 전화번호 추출
#지역번호 3자리, 국번: 4자리, 번호
str_extract_all(s1, "[0-9]{3}-[0-9]{4}-[0-9]{3,4}") #"010-1234-5678"
# 전화번호 추출
#지역번호 3자리, 국번: 4자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{3}-[.0-9]{4}-[.0-9]{3,4}") #"010-1234-5678"
#지역번호 3자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{3}[.0-9]{3}[.0-9]{4}")
#지역번호 3자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{3}[.0-9]{3}[.0-9]{4}")
s1
#지역번호 3자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{3}[.0-9]{3}[0-9]{4}")
#지역번호 3자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{3}[0-9]{3}[0-9]{4}")
#지역번호 3자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[0-9]{3}[0-9]{3}[0-9]{4}")
#지역번호 3자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[0-9]{3}-[0-9]{3}-[0-9]{4}")
# 전화번호 추출
#지역번호 3자리, 국번: 4자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{3}-[.0-9]{4}-[.0-9]{3,4}") #"010-1234-5678"
#지역번호 2자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{2}-[0-9]{3}-[0-9]{4}")
#지역번호 2자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{.2}-[0-9]{3}-[0-9]{4}")
#지역번호 2자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[0-9]{2}-[0-9]{3}-[0-9]{4}")
#지역번호 2자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, ".[0-9]{2}-[0-9]{3}-[0-9]{4}")
#지역번호 2자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[0-9]{2}-[0-9]{3}-[0-9]{4}")
#지역번호 2자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[0-9]{1}[0-9]{2}-[0-9]{3}-[0-9]{4}")
#지역번호 2자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[0-9]{0}[0-9]{2}-[0-9]{3}-[0-9]{4}")
#지역번호 2자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[^0-9]{0}[0-9]{2}-[0-9]{3}-[0-9]{4}")
#지역번호 2자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[^0-9]{0}[0-9]{2}-[0-9]{3}-[0-9]{4}")
#지역번호 2자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[^0-9]{1}[0-9]{2}-[0-9]{3}-[0-9]{4}")
s1 <-  "abcd1234ABCDEFG홍길동tel010-1234-5678,031-1234-5678 010-123-5678 02-234-1234 # 주민번호123456-1234567"
# 전화번호 추출
#지역번호 3자리, 국번: 4자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{3}-[.0-9]{4}-[.0-9]{3,4}") #"010-1234-5678"
#지역번호 3자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[0-9]{3}-[0-9]{3}-[0-9]{4}")
# 전화번호 추출
#지역번호 3자리, 국번: 4자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{3}-[.0-9]{4}-[.0-9]{3,4}") #"010-1234-5678"
#지역번호 3자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[0-9]{3}-[0-9]{3}-[0-9]{4}")
# 전화번호 추출
#지역번호 3자리, 국번: 4자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{3}-[.0-9]{4}-[.0-9]{3,4}") #"010-1234-5678"
#지역번호 3자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[0-9]{3}-[0-9]{3}-[0-9]{4}")
#지역번호 2자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[^0-9]{1}[0-9]{2}-[0-9]{3}-[0-9]{4}")
str_extract_all(s1, "[0-9]{3}-[0-9]{4}-[0-9]{3,4}")
######### 주민번호 축축 ###########
# 기본 축축 (6자리-7자리 )
tr_extract_all(s1, "[0-9]{6}-[0-9]{7}")
######### 주민번호 축축 ###########
# 기본 축축 (6자리-7자리 )
s1
str_extract_all(s1, "[0-9]{6}-[0-9]{7}")
s1 <-  "abcd1234ABCDEFG홍길동tel010-1234-5678,031-1234-5678 010-123-5678 02-234-1234 # 주민번호123456-1234567 123456-2234567 123456-3234567 123456-4234567"
######### 주민번호 축축 ###########
# 기본 축축 (6자리-7자리 )
s1
str_extract_all(s1, "[0-9]{6}-[0-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[^0-9]{1}[0-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[^0-9]{7}[0-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[1][0-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[1]{1}[0-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[^1]{1}[0-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[0-9]{7}")
# 1인경우
str_extract_all(s1, "[2-9]{6}-[0-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[2-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[^2-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[^2-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[2-9]{7}")
# 1인경우
str_extract_all(s1, "^[0-9]{6}-[2-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[0-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[0-9]{7}[1]")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[^0-1][0-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[0-1][0-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[1]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[1-1]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[.1]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[.0-1]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[0-1]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[1-1]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[1-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[2-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[^2-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[^0-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[0-9]{7}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[1]{1}[0-9]{6}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[2]{1}[0-9]{6}")
# 3인경우
str_extract_all(s1, "[0-9]{6}-[3]{1}[0-9]{6}")
# 4인경우
str_extract_all(s1, "[0-9]{6}-[4]{1}[0-9]{6}")
#지역번호 3자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[0-9]{3}-[0-9]{3}-[0-9]{4}")
##### 전화번호 추출 ############
#지역번호 3자리, 국번: 4자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{3}-[.0-9]{4}-[.0-9]{3,4}") #"010-1234-5678"
#지역번호 3자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[0-9]{3}-[0-9]{3}-[0-9]{4}")
#지역번호 2자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[^0-9]{1}[0-9]{2}-[0-9]{3}-[0-9]{4}")
#지역번호 2자리(02), 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[^0-9]{1}[0-9]{2}-[0-9]{3}-[0-9]{4}")
##### 전화번호 추출 ############
#지역번호 3자리, 국번: 4자리, 번호4자리만 축출
str_extract_all(s1, "[.0-9]{3}-[.0-9]{4}-[.0-9]{3,4}") #"010-1234-5678"
#지역번호 3자리, 국번: 3자리, 번호4자리만 축출
str_extract_all(s1, "[0-9]{3}-[0-9]{3}-[0-9]{4}")
# 1인경우
str_extract_all(s1, "[0-9]{6}-[1]{1}[1-9]{6}")
# 2인경우
str_extract_all(s1, "[0-9]{6}-[2]{1}[1-9]{6}")
# 3인경우
str_extract_all(s1, "[0-9]{6}-[3]{1}[1-9]{6}")
# 4인경우
str_extract_all(s1, "[0-9]{6}-[4]{1}[1-9]{6}")
num <-  scan()
num
sum(num)
# 키보드 입력 : 문자입력
name <- scan(what = character())
name
df <- edit(df)
df <- edit(df)
df <- data.frame() #빈 데이터프레임 생성
df <- edit(df)
df <- data.frame() #빈 데이터프레임 생성
df <- edit(df)
df <- data.frame() #빈 데이터프레임 생성
df <- edit(df)
install.packages(c("lifecycle", "Matrix", "rlang", "rprojroot"))
install.packages("XQuartz")
df <- edit(df)
df <- data.frame() #빈 데이터프레임 생성
df <- edit(df)
student <- read.table(file='student.csv')
student <- read.table(file='./student.csv')
student <- read.table(file='./students.csv')
student
student <- read.table(file='./students.csv')
student
edit(student)
student
edit(student)
student <- read.table(file='./students.csv')
student
edit(student)
student
edit(student)
edit(student)
edit(student)
edit(student)
edit(student)
chart <-c(300,450,500,320,460,220,480,510)
names(chart) <- c("2022 1분기","2022 2분기 ", "2022 3분기","2022 4분기 ","2023 1분기","2023 2분기","2023 3분기","2023 4분기")
chart
str(chart)
barplot(chart, ylim = c(0,600), col = rainbow(8), main = "2022년 vs 2023년 비교")
par(family='Unbatang')
barplot(chart, ylim = c(0,600), col = rainbow(8), main = "2022년 vs 2023년 비교")
heme_set(theme_gray(base_family='NanumGothic'))
barplot(chart, ylim = c(0,600), col = rainbow(8), main = "2022년 vs 2023년 비교")
heme_set(theme_gray(base_family='NanumGothic'))
chart <-c(300,450,500,320,460,220,480,510)
names(chart) <- c("2022 1분기","2022 2분기 ", "2022 3분기","2022 4분기 ","2023 1분기","2023 2분기","2023 3분기","2023 4분기")
chart
str(chart)
barplot(chart, ylim = c(0,600), col = rainbow(8), main = "2022년 vs 2023년 비교")
par(family='Unbatang')
heme_set(theme_gray(base_family='NanumGothic'))
theme_set(theme_gray(base_family='NanumGothic'))
theme_set(theme_gray(base_family='D2Coding'))
par(family='AppleGothic')
barplot(chart, ylim = c(0,600), col = rainbow(8), main = "2022년 vs 2023년 비교")
barplot(chart, xlim = c(0,600), col = rainbow(8), horiz = T, xlab = "매출액", ylab = '년도별 분기 현황', main = "2022년도 vs 2023년도")
# 데이터 셋
# 미국 버지니아주의 하위계층 사망 비율
data(VADeaths)
View(VADeaths)
View(VADeaths)
VADeaths
barplot(VADeaths, beside = T, col = rainbow(6), xlab = '출신지역', ylab = "사망율", main = "VA 하위 계층 사망비율")
legend(20,70, c("50-54", "55-59","60-64","65-59","70-74"), cex = 0.8, fill = rainbow(5))
barplot(VADeaths, beside = T, col = rainbow(5), xlab = '출신지역', ylab = "사망율", main = "VA 하위 계층 사망비율")
legend(20,70, c("50-54","55-59","60-64","65-59","70-74"), cex = 0.8, fill = rainbow(5))
barplot(VADeaths, beside = F, col = rainbow(5), xlab = '출신지역', ylab = "사망율", main = "VA 하위 계층 사망비율")
barplot(VADeaths, beside = T, col = rainbow(5), xlab = '출신지역', ylab = "사망율", main = "VA 하위 계층 사망비율")
legend(20,70, c("50-54","55-59","60-64","65-59","70-74"), cex = 0.8, fill = rainbow(5))
barplot(VADeaths, beside = F, col = rainbow(5), xlab = '출신지역', ylab = "사망율", main = "VA 하위 계층 사망비율")
legend(20,70, c("50-54","55-59","60-64","65-59","70-74"), cex = 0.8, fill = rainbow(5))
# 범례표시
x = 4 # 출력위치 : x
x =20 # 출력위치 : y
legend(20,70, c("50-54","55-59","60-64","65-59","70-74"), cex = 0.8, fill = rainbow(5))
barplot(VADeaths, beside = F, col = rainbow(5), xlab = '출신지역', ylab = "사망율", main = "VA 하위 계층 사망비율")
# 범례표시
x = 4 # 출력위치 : x
x =20 # 출력위치 : y
legend(20,70, c("50-54","55-59","60-64","65-59","70-74"), cex = 0.8, fill = rainbow(5))
legend(x,y, c("50-54","55-59","60-64","65-59","70-74"), cex = 0.8, fill = rainbow(5))
# 범례표시
x = 4 # 출력위치 : x
x =20 # 출력위치 : y
legend(x,y, c("50-54","55-59","60-64","65-59","70-74"), cex = 0.8, fill = rainbow(5))
exam  <- read.csv("./data/csv_exam.csv")
exam  <- read.csv("../data/csv_exam.csv")
exam  <- read.csv("./00.Data/csv_exam.csv")
exam  <- read.csv("../00.Data/csv_exam.csv")
exam  <- read.csv(".././00.Data/csv_exam.csv")
exam  <- read.csv("..00.Data/csv_exam.csv")
exam  <- read.csv("../00.Data/csv_exam.csv")
exam  <- read.csv("./00.Data/csv_exam.csv")
